*** README for "pm-utils light"

Like pm-utils as much as possible.

Pros:

 * It tries its best to run hooks in exactly the same way as pm-utils.
 * It's faster
 * It can load hooks from a .so file, which is much faster, avoids
   context switches and allows to keep state conveniently in memory.
 * .so files will be loaded also if they are not executable. Install a
   non-executable .so file to have it loaded by pm-utils light but ignored by
   pm-utils.
 * It allows to cancel a resume, for example in order to go back to sleep in
   case of a resume for usb disconnect. To do so, a script can exit with status
   250.

Cons:

 * No support for quirks
 * It does not ship the functions and pm-functions shell libraries, so plugins
   cannot make use of them

Tips:

 * To disable the existing pm-utils hooks:
   cd /usr/lib/pm-utils/sleep.d
   for i in *; do touch /etc/pm/sleep.d/$i; done

 * To make om-led suid root:

   dpkg-statoverride --update --add root root 04755 /usr/bin/om-led

 * To create a .so hook:

   // You only need "hooks_add_function" from pm-utils-light
   typedef int hook_function(const char* name, const char* param);
   extern void hooks_add_function(const char* name, hook_function func);

   /*
    * A hook function works just like a hook script, it gets the same parameter
    * and it returns the same values.
    *
    * `name' is the name used when registering this hook
    */
   static int hook_example(const char* name, const char* param)
   {
        if (strcmp(param, "suspend") == 0)
        {
		// Do something
        }
        else if (strcmp(param, "resume") == 0)
        {
		// Do something
        }
        return 0;
   }
 
   // pm-utils-light will call init() when loading the plugin
   void init()
   {
	// Register plugins
   	hooks_add_function("00-example", hook_example);
   }

   Build the hook with: gcc --shared -fPIC -o hook.so hook.c

   Then install it, non executable, among the other pm-utils hooks.
   Since it is not executable, normal pm-utils will not touch it.

 * To provide shell alternatives for .so hooks, for use with normal pm-utils

   pm-utils light will give a slightly higher priority to dynamic hooks than to
   hooks with the same name in the same directory. This means that it is
   possible to package fallback normal hooks for use by normal pm-utils.

   For example, if hooks.so provides "00-example", you can also install a
   "00-example" shellscript in the same directory. pm-utils light will prefer
   to run the function in the .so hook, and normal pm-utils will ignore the
   non-executable .so file and run the "00-example" shellscript.


*** README for omhacks

It is a fast and simple library of common openmoko utility functions.

There is a very simple command line front-end called "om", which exposes all
the library functions. Just run om to get its command line help.

The extra om-led executable is the same as running "om led", but is also
provided separately so that it's possible to make "om-led" suid but not "om".

If you need another function in the library, please send a patch. Please try to
keep in the minimalist spirit of the library, and also provide a command line
front end.


*** TODO list
 - get rid of *_swap() in omhacks
 - recreate lindi's suspend/resume scripts
 - My goals
    - stand-alone pppd
       + turn gsm on/off (done)
       - turn gsm really on (can be done in pppd's chatscript)
    - zavai ported to gpsd
       + turn gps on/off (done)
       + gps on during suspend (done)
    - wake up alarm
       - all done, just hooks need to be written
 - What to do with this resume reason?
   [...]
   * EINT01_GSM
   [...]
   * EINT09_PMU
   [...]
 - GSM
    - turn on all, inc. PIN
 - GPS
    - suspend/resume GPS, saving/restoring status
    - set funky parameters
       - keep GPS on during suspend
       - set stationary threshold for different profiles (Automotive = 3, pedestrian = 2, stationary = 1)
         http://lists.linuxtogo.org/pipermail/smartphones-userland/2009-October/002037.html
   http://wiki.openmoko.org/wiki/Neo_FreeRunner_GPS#UBX_protocol
   00:29 #openmoko-debian < lindi-> enrico: 'om gps keep-on-in-suspend' does not say anything to the gps chip. does 
                                    this really work? won't it wake up the main cpu since it is sending coordinates 
				    constantly?
   00:30 #openmoko-debian < enrico> lindi-: I have *no* idea
   00:30 #openmoko-debian < enrico> lindi-: it's too cold outside now to test it
   00:30 #openmoko-debian < lindi-> since there's some UBX command to put the GPS chip to a "keep fix but don't 
   			            actively track and report coordinates" mode

   20:37 #openmoko-debian < enrico> lindi-: in fact I can code that ubxgen in C
   20:37 #openmoko-debian < lindi-> enrico: yes
   20:38 #openmoko-debian < lindi-> enrico: together with manual page that has examples it would be very useful tool
 - Wifi
    - ask the kernel people what is the proper way to turn it on/off, and to check if it's on
 - .vapi for omhacks, to use in zavai
 - battery
    - read, monitor
20:18 #openmoko-debian < lindi-> enrico: how about adding "energy" and "consumption" to om?
20:19 #openmoko-debian < lindi-> enrico: and usb_curlimit
20:19 #openmoko-debian < lindi-> and host/device modes
 - zavai calls pm-suspend
 - zavai hooks (alarm, mostly)
 - fork pm-utils-light off omhacks at a later stage

 - reduce the size of lindi's ~/bin/
   http://lindi.iki.fi/lindi/openmoko/custom-scripts.txt
16:18 #openmoko-debian < enrico> lindi-: a few questions:
16:18 #openmoko-debian < enrico> lindi-: 2. what's the fiddling with sysrq-trigger?
16:19 #openmoko-debian < enrico> lindi-: 3. why touch /tmp/frameworkd.pid ?
-------------------------------------------------------------------------------------------------------------------
16:40 #openmoko-debian < lindi-> enrico: 2. sysrq trigger just makes sure kernel does not log anything on resume 
                                 to display, this used to slow things down a lot with debugging information
16:40 #openmoko-debian < lindi-> enrico: 3. gsm-watchdog looks at the freshness of /tmp/frameworkd.pid
16:41 #openmoko-debian < lindi-> enrico: 3. (Right after resume ogsmd won't respond to dbus. touching pid file 
                                 makes sure the watchdog does not immediately kill ogsmd in this case but waits 
                                 for a while)

